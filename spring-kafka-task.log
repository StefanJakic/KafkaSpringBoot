2023-03-21T19:17:50.665+01:00  INFO 36704 --- [main] c.s.task.SpringKafkaTaskApplication      : Starting SpringKafkaTaskApplication using Java 17.0.4.1 with PID 36704 (C:\Users\stjakic\tasks-workspace\KafkaSpringBoot\target\classes started by stjakic in C:\Users\stjakic\tasks-workspace\KafkaSpringBoot)
2023-03-21T19:17:50.676+01:00  INFO 36704 --- [main] c.s.task.SpringKafkaTaskApplication      : No active profile set, falling back to 1 default profile: "default"
2023-03-21T19:17:51.234+01:00  INFO 36704 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
2023-03-21T19:17:51.263+01:00  INFO 36704 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
2023-03-21T19:17:52.485+01:00  INFO 36704 --- [main] o.a.k.clients.admin.AdminClientConfig    : AdminClientConfig values: 
	bootstrap.servers = [localhost:9092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2023-03-21T19:17:52.716+01:00  INFO 36704 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 3.3.1
2023-03-21T19:17:52.717+01:00  INFO 36704 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: e23c59d00e687ff5
2023-03-21T19:17:52.717+01:00  INFO 36704 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1679422672715
2023-03-21T19:17:53.118+01:00  INFO 36704 --- [kafka-admin-client-thread | adminclient-1] o.a.kafka.common.utils.AppInfoParser     : App info kafka.admin.client for adminclient-1 unregistered
2023-03-21T19:17:53.129+01:00  INFO 36704 --- [kafka-admin-client-thread | adminclient-1] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2023-03-21T19:17:53.129+01:00  INFO 36704 --- [kafka-admin-client-thread | adminclient-1] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-03-21T19:17:53.129+01:00  INFO 36704 --- [kafka-admin-client-thread | adminclient-1] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2023-03-21T19:17:53.135+01:00  INFO 36704 --- [main] o.s.i.endpoint.EventDrivenConsumer       : Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2023-03-21T19:17:53.136+01:00  INFO 36704 --- [main] o.s.i.channel.PublishSubscribeChannel    : Channel 'application.errorChannel' has 1 subscriber(s).
2023-03-21T19:17:53.137+01:00  INFO 36704 --- [main] o.s.i.endpoint.EventDrivenConsumer       : started bean '_org.springframework.integration.errorLogger'
2023-03-21T19:17:53.165+01:00  INFO 36704 --- [main] o.a.k.clients.consumer.ConsumerConfig    : ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = earliest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-springkafkatask_3-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = springkafkatask_3
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-03-21T19:17:53.206+01:00  INFO 36704 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 3.3.1
2023-03-21T19:17:53.206+01:00  INFO 36704 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: e23c59d00e687ff5
2023-03-21T19:17:53.207+01:00  INFO 36704 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1679422673206
2023-03-21T19:17:53.210+01:00  INFO 36704 --- [main] o.a.k.clients.consumer.KafkaConsumer     : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Subscribed to topic(s): topicTask1
2023-03-21T19:17:53.235+01:00  INFO 36704 --- [main] c.s.task.SpringKafkaTaskApplication      : Started SpringKafkaTaskApplication in 3.036 seconds (process running for 3.499)
2023-03-21T19:17:53.250+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Resetting the last seen epoch of partition topicTask1-0 to 0 since the associated topicId changed from null to fd4vOPB3T9CiP1d2Epi0Lw
2023-03-21T19:17:53.252+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Resetting the last seen epoch of partition topicTask1-1 to 0 since the associated topicId changed from null to fd4vOPB3T9CiP1d2Epi0Lw
2023-03-21T19:17:53.254+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Cluster ID: DCKNfptMQ82ihbYja0cMrg
2023-03-21T19:17:53.261+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Discovered group coordinator host.docker.internal:9092 (id: 2147483647 rack: null)
2023-03-21T19:17:53.265+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] (Re-)joining group
2023-03-21T19:17:53.305+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Request joining group due to: need to re-join with the given member-id: consumer-springkafkatask_3-1-16f091db-6a2e-4503-b548-dc4d8836e835
2023-03-21T19:17:53.306+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Request joining group due to: rebalance failed due to 'The group member needs to have a valid member id before actually entering a consumer group.' (MemberIdRequiredException)
2023-03-21T19:17:53.307+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] (Re-)joining group
2023-03-21T19:17:53.326+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Successfully joined group with generation Generation{generationId=6, memberId='consumer-springkafkatask_3-1-16f091db-6a2e-4503-b548-dc4d8836e835', protocol='range'}
2023-03-21T19:17:53.329+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Finished assignment for group at generation 6: {consumer-springkafkatask_3-1-16f091db-6a2e-4503-b548-dc4d8836e835=Assignment(partitions=[topicTask1-0, topicTask1-1])}
2023-03-21T19:17:53.405+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Successfully synced group in generation Generation{generationId=6, memberId='consumer-springkafkatask_3-1-16f091db-6a2e-4503-b548-dc4d8836e835', protocol='range'}
2023-03-21T19:17:53.406+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Notifying assignor about the new Assignment(partitions=[topicTask1-0, topicTask1-1])
2023-03-21T19:17:53.410+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Adding newly assigned partitions: topicTask1-0, topicTask1-1
2023-03-21T19:17:53.430+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Setting offset for partition topicTask1-0 to the committed offset FetchPosition{offset=17, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[host.docker.internal:9092 (id: 0 rack: null)], epoch=0}}
2023-03-21T19:17:53.430+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_3-1, groupId=springkafkatask_3] Setting offset for partition topicTask1-1 to the committed offset FetchPosition{offset=83, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[host.docker.internal:9092 (id: 0 rack: null)], epoch=0}}
2023-03-21T19:17:53.432+01:00  INFO 36704 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.s.k.l.KafkaMessageListenerContainer    : springkafkatask_3: partitions assigned: [topicTask1-0, topicTask1-1]
2023-03-21T19:18:13.827+01:00  INFO 36848 --- [main] c.s.task.SpringKafkaTaskApplication      : Starting SpringKafkaTaskApplication using Java 17.0.4.1 with PID 36848 (C:\Users\stjakic\tasks-workspace\KafkaSpringBoot\target\classes started by stjakic in C:\Users\stjakic\tasks-workspace\KafkaSpringBoot)
2023-03-21T19:18:13.834+01:00  INFO 36848 --- [main] c.s.task.SpringKafkaTaskApplication      : No active profile set, falling back to 1 default profile: "default"
2023-03-21T19:18:14.374+01:00  INFO 36848 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
2023-03-21T19:18:14.393+01:00  INFO 36848 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
2023-03-21T19:18:15.536+01:00  INFO 36848 --- [main] o.a.k.clients.admin.AdminClientConfig    : AdminClientConfig values: 
	bootstrap.servers = [localhost:9092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2023-03-21T19:18:15.688+01:00  INFO 36848 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 3.3.1
2023-03-21T19:18:15.689+01:00  INFO 36848 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: e23c59d00e687ff5
2023-03-21T19:18:15.689+01:00  INFO 36848 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1679422695687
2023-03-21T19:18:15.959+01:00  INFO 36848 --- [kafka-admin-client-thread | adminclient-1] o.a.kafka.common.utils.AppInfoParser     : App info kafka.admin.client for adminclient-1 unregistered
2023-03-21T19:18:15.963+01:00  INFO 36848 --- [kafka-admin-client-thread | adminclient-1] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2023-03-21T19:18:15.963+01:00  INFO 36848 --- [kafka-admin-client-thread | adminclient-1] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-03-21T19:18:15.963+01:00  INFO 36848 --- [kafka-admin-client-thread | adminclient-1] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2023-03-21T19:18:15.968+01:00  INFO 36848 --- [main] o.s.i.endpoint.EventDrivenConsumer       : Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2023-03-21T19:18:15.969+01:00  INFO 36848 --- [main] o.s.i.channel.PublishSubscribeChannel    : Channel 'application.errorChannel' has 1 subscriber(s).
2023-03-21T19:18:15.969+01:00  INFO 36848 --- [main] o.s.i.endpoint.EventDrivenConsumer       : started bean '_org.springframework.integration.errorLogger'
2023-03-21T19:18:16.000+01:00  INFO 36848 --- [main] o.a.k.clients.consumer.ConsumerConfig    : ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = earliest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-springkafkatask_4-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = springkafkatask_4
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-03-21T19:18:16.047+01:00  INFO 36848 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 3.3.1
2023-03-21T19:18:16.048+01:00  INFO 36848 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: e23c59d00e687ff5
2023-03-21T19:18:16.048+01:00  INFO 36848 --- [main] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1679422696047
2023-03-21T19:18:16.052+01:00  INFO 36848 --- [main] o.a.k.clients.consumer.KafkaConsumer     : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Subscribed to topic(s): topicTask1
2023-03-21T19:18:16.071+01:00  INFO 36848 --- [main] c.s.task.SpringKafkaTaskApplication      : Started SpringKafkaTaskApplication in 2.732 seconds (process running for 3.095)
2023-03-21T19:18:16.080+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Resetting the last seen epoch of partition topicTask1-0 to 0 since the associated topicId changed from null to fd4vOPB3T9CiP1d2Epi0Lw
2023-03-21T19:18:16.082+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Resetting the last seen epoch of partition topicTask1-1 to 0 since the associated topicId changed from null to fd4vOPB3T9CiP1d2Epi0Lw
2023-03-21T19:18:16.084+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Cluster ID: DCKNfptMQ82ihbYja0cMrg
2023-03-21T19:18:16.086+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Discovered group coordinator host.docker.internal:9092 (id: 2147483647 rack: null)
2023-03-21T19:18:16.089+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] (Re-)joining group
2023-03-21T19:18:16.111+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Request joining group due to: need to re-join with the given member-id: consumer-springkafkatask_4-1-107cf636-79af-4830-8966-d02ff0ef7785
2023-03-21T19:18:16.112+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Request joining group due to: rebalance failed due to 'The group member needs to have a valid member id before actually entering a consumer group.' (MemberIdRequiredException)
2023-03-21T19:18:16.112+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] (Re-)joining group
2023-03-21T19:18:16.118+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Successfully joined group with generation Generation{generationId=1, memberId='consumer-springkafkatask_4-1-107cf636-79af-4830-8966-d02ff0ef7785', protocol='range'}
2023-03-21T19:18:16.121+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Finished assignment for group at generation 1: {consumer-springkafkatask_4-1-107cf636-79af-4830-8966-d02ff0ef7785=Assignment(partitions=[topicTask1-0, topicTask1-1])}
2023-03-21T19:18:16.127+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Successfully synced group in generation Generation{generationId=1, memberId='consumer-springkafkatask_4-1-107cf636-79af-4830-8966-d02ff0ef7785', protocol='range'}
2023-03-21T19:18:16.128+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Notifying assignor about the new Assignment(partitions=[topicTask1-0, topicTask1-1])
2023-03-21T19:18:16.130+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Adding newly assigned partitions: topicTask1-0, topicTask1-1
2023-03-21T19:18:16.138+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Found no committed offset for partition topicTask1-0
2023-03-21T19:18:16.139+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Found no committed offset for partition topicTask1-1
2023-03-21T19:18:16.156+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.SubscriptionState    : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Resetting offset for partition topicTask1-0 to position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[host.docker.internal:9092 (id: 0 rack: null)], epoch=0}}.
2023-03-21T19:18:16.157+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.c.c.internals.SubscriptionState    : [Consumer clientId=consumer-springkafkatask_4-1, groupId=springkafkatask_4] Resetting offset for partition topicTask1-1 to position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[host.docker.internal:9092 (id: 0 rack: null)], epoch=0}}.
2023-03-21T19:18:16.158+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.s.k.l.KafkaMessageListenerContainer    : springkafkatask_4: partitions assigned: [topicTask1-0, topicTask1-1]
2023-03-21T19:18:16.197+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 0, CreateTime = 1679002982175, serialized key size = -1, serialized value size = 6, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = stefan)
2023-03-21T19:18:16.207+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.207+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 1, CreateTime = 1679003213564, serialized key size = -1, serialized value size = 13, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = it is working)
2023-03-21T19:18:16.208+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.208+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 2, CreateTime = 1679003530954, serialized key size = -1, serialized value size = 11, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = are you ok?)
2023-03-21T19:18:16.208+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.208+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 3, CreateTime = 1679003560380, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = it is nice)
2023-03-21T19:18:16.208+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.209+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 4, CreateTime = 1679003593913, serialized key size = -1, serialized value size = 17, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = offset is growing)
2023-03-21T19:18:16.209+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.209+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 5, CreateTime = 1679005634036, serialized key size = -1, serialized value size = 14, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = what is heppen)
2023-03-21T19:18:16.209+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.210+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 6, CreateTime = 1679005644567, serialized key size = -1, serialized value size = 17, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = is still working?)
2023-03-21T19:18:16.210+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.210+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 7, CreateTime = 1679005893020, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = helloooooo)
2023-03-21T19:18:16.210+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.211+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 8, CreateTime = 1679005899472, serialized key size = -1, serialized value size = 5, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = again)
2023-03-21T19:18:16.211+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.211+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 9, CreateTime = 1679006583398, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e1)
2023-03-21T19:18:16.211+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.211+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 10, CreateTime = 1679006588874, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e2)
2023-03-21T19:18:16.212+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.212+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 11, CreateTime = 1679070637715, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e)
2023-03-21T19:18:16.212+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.212+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 12, CreateTime = 1679070645278, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = w)
2023-03-21T19:18:16.212+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:16.213+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 13, CreateTime = 1679070768147, serialized key size = -1, serialized value size = 61, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "100"})
2023-03-21T19:18:16.248+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:16.249+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=100  ]
2023-03-21T19:18:16.249+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=50, callId=100  ]
2023-03-21T19:18:16.249+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 14, CreateTime = 1679070799657, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "250", "callId" : "100"})
2023-03-21T19:18:16.250+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:16.251+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=250, callId=100  ]
2023-03-21T19:18:16.251+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:16.255+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=100, callStartTimestamp=50, callEndTimestamp=250, callDuration=200]
2023-03-21T19:18:16.256+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 100
2023-03-21T19:18:16.256+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=100, callStartTimestamp=50, callEndTimestamp=250, callDuration=200]
2023-03-21T19:18:16.256+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : TRYING INSERT INTO kafka_messages MESSAGE --> 
2023-03-21T19:18:16.262+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2023-03-21T19:18:17.328+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.

org.postgresql.util.PSQLException: The connection attempt failed.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:331) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:247) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.makeConnection(Driver.java:434) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.connect(Driver.java:291) ~[postgresql-42.5.1.jar:42.5.1]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) ~[HikariCP-5.0.1.jar:na]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:646) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:960) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1015) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1025) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at com.springkafka.task.DatabaseMessageHandler.saveResponseMessageToDatabase(DatabaseMessageHandler.java:60) ~[classes/:na]
	at com.springkafka.task.DatabaseMessageHandler.tryToSendToDatabase(DatabaseMessageHandler.java:93) ~[classes/:na]
	at com.springkafka.task.DatabaseMessageHandler.handleMessage(DatabaseMessageHandler.java:85) ~[classes/:na]
	at com.springkafka.task.SpringKafkaTaskApplication.listen(SpringKafkaTaskApplication.java:107) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169) ~[spring-messaging-6.0.3.jar:6.0.3]
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119) ~[spring-messaging-6.0.3.jar:6.0.3]
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:366) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2859) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2839) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.lambda$doInvokeRecordListener$56(KafkaMessageListenerContainer.java:2762) ~[spring-kafka-3.0.1.jar:3.0.1]
	at io.micrometer.observation.Observation.observe(Observation.java:559) ~[micrometer-observation-1.10.2.jar:1.10.2]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2760) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2612) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2498) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2144) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1499) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1463) ~[spring-kafka-3.0.1.jar:3.0.1]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1338) ~[spring-kafka-3.0.1.jar:3.0.1]
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]
Caused by: java.net.UnknownHostException: ${SPRING_DATASOURCE_URL}
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567) ~[na:na]
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327) ~[na:na]
	at java.base/java.net.Socket.connect(Socket.java:633) ~[na:na]
	at org.postgresql.core.PGStream.createSocket(PGStream.java:241) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.PGStream.<init>(PGStream.java:98) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:109) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:235) ~[postgresql-42.5.1.jar:42.5.1]
	... 45 common frames omitted

2023-03-21T19:18:17.333+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.333+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Fail to send message to database Failed to obtain JDBC Connection
2023-03-21T19:18:17.341+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-03-21T19:18:17.351+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-03-21T19:18:17.367+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 3.3.1
2023-03-21T19:18:17.368+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: e23c59d00e687ff5
2023-03-21T19:18:17.368+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1679422697367
2023-03-21T19:18:17.375+01:00  INFO 36848 --- [kafka-producer-network-thread | producer-1] org.apache.kafka.clients.Metadata        : [Producer clientId=producer-1] Cluster ID: DCKNfptMQ82ihbYja0cMrg
2023-03-21T19:18:17.380+01:00  INFO 36848 --- [kafka-producer-network-thread | producer-1] org.apache.kafka.clients.Metadata        : [Producer clientId=producer-1] Resetting the last seen epoch of partition topicTask2-0 to 0 since the associated topicId changed from null to fP5FeDXtREarfdKfWe2h3Q
2023-03-21T19:18:17.392+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 15, CreateTime = 1679070825611, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "99"})
2023-03-21T19:18:17.393+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.394+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=99  ]
2023-03-21T19:18:17.394+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=50, callId=99  ]
2023-03-21T19:18:17.394+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 0, leaderEpoch = 0, offset = 16, CreateTime = 1679070829375, serialized key size = -1, serialized value size = 59, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "250", "callId" : "99"})
2023-03-21T19:18:17.395+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.395+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=250, callId=99  ]
2023-03-21T19:18:17.396+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.396+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=99, callStartTimestamp=50, callEndTimestamp=250, callDuration=200]
2023-03-21T19:18:17.396+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 99
2023-03-21T19:18:17.396+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=99, callStartTimestamp=50, callEndTimestamp=250, callDuration=200]
2023-03-21T19:18:17.396+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.397+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 0, CreateTime = 1679006686376, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e3)
2023-03-21T19:18:17.397+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.397+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 1, CreateTime = 1679006692330, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e4)
2023-03-21T19:18:17.398+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.398+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 2, CreateTime = 1679006739929, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e5)
2023-03-21T19:18:17.398+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.398+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 3, CreateTime = 1679006742047, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e6)
2023-03-21T19:18:17.398+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.398+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 4, CreateTime = 1679006761713, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e7)
2023-03-21T19:18:17.399+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.399+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 5, CreateTime = 1679006773363, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e8)
2023-03-21T19:18:17.399+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.399+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 6, CreateTime = 1679006814765, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e9)
2023-03-21T19:18:17.400+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.400+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 7, CreateTime = 1679006819959, serialized key size = -1, serialized value size = 3, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = wtf)
2023-03-21T19:18:17.400+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.401+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 8, CreateTime = 1679006845118, serialized key size = -1, serialized value size = 3, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e10)
2023-03-21T19:18:17.401+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.401+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 9, CreateTime = 1679006849400, serialized key size = -1, serialized value size = 3, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e11)
2023-03-21T19:18:17.401+01:00  INFO 36848 --- [kafka-producer-network-thread | producer-1] o.a.k.c.p.internals.TransactionManager   : [Producer clientId=producer-1] ProducerId set to 5000 with epoch 0
2023-03-21T19:18:17.401+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.402+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 10, CreateTime = 1679006879556, serialized key size = -1, serialized value size = 3, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e12)
2023-03-21T19:18:17.402+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.402+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 11, CreateTime = 1679006953828, serialized key size = -1, serialized value size = 17, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"ime": "stefan"})
2023-03-21T19:18:17.404+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.404+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 12, CreateTime = 1679006991827, serialized key size = -1, serialized value size = 38, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"firstName":"John", "lastName":"Doe"})
2023-03-21T19:18:17.405+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.406+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 13, CreateTime = 1679007003806, serialized key size = -1, serialized value size = 38, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"firstName":"John", "lastName":"Doe"})
2023-03-21T19:18:17.407+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.407+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 14, CreateTime = 1679007016319, serialized key size = -1, serialized value size = 38, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"firstName":"John", "lastName":"Doe"})
2023-03-21T19:18:17.408+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.409+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 15, CreateTime = 1679007025595, serialized key size = -1, serialized value size = 38, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"firstName":"John", "lastName":"Doe"})
2023-03-21T19:18:17.409+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.410+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 16, CreateTime = 1679007200030, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e1)
2023-03-21T19:18:17.410+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.410+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 17, CreateTime = 1679007204668, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e2)
2023-03-21T19:18:17.410+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.410+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 18, CreateTime = 1679007218827, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e3)
2023-03-21T19:18:17.410+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.410+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 19, CreateTime = 1679007222452, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e4)
2023-03-21T19:18:17.411+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.411+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 20, CreateTime = 1679007234361, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e5)
2023-03-21T19:18:17.411+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.411+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 21, CreateTime = 1679007260482, serialized key size = -1, serialized value size = 38, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"firstName":"John", "lastName":"Doe"})
2023-03-21T19:18:17.412+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.413+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 22, CreateTime = 1679007373930, serialized key size = -1, serialized value size = 61, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "100"})
2023-03-21T19:18:17.413+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.413+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=100  ]
2023-03-21T19:18:17.414+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=50, callId=100  ]
2023-03-21T19:18:17.414+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 23, CreateTime = 1679007394134, serialized key size = -1, serialized value size = 63, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "99999"})
2023-03-21T19:18:17.414+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.414+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=99999  ]
2023-03-21T19:18:17.415+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=50, callId=99999  ]
2023-03-21T19:18:17.415+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 24, CreateTime = 1679007419755, serialized key size = -1, serialized value size = 64, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "-88888"})
2023-03-21T19:18:17.415+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.416+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=-88888  ]
2023-03-21T19:18:17.416+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=50, callId=-88888  ]
2023-03-21T19:18:17.416+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 25, CreateTime = 1679007449005, serialized key size = -1, serialized value size = 63, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "nesto"})
2023-03-21T19:18:17.417+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.418+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=nesto  ]
2023-03-21T19:18:17.418+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=50, callId=nesto  ]
2023-03-21T19:18:17.419+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 26, CreateTime = 1679007463418, serialized key size = -1, serialized value size = 66, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "nesto333"})
2023-03-21T19:18:17.419+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.420+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=nesto333  ]
2023-03-21T19:18:17.420+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=50, callId=nesto333  ]
2023-03-21T19:18:17.420+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 27, CreateTime = 1679007475461, serialized key size = -1, serialized value size = 73, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "-50", "callId" : "nesto777777777"})
2023-03-21T19:18:17.422+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.422+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : Invalid message inputs!
2023-03-21T19:18:17.423+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 28, CreateTime = 1679007887110, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e3)
2023-03-21T19:18:17.424+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.424+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 29, CreateTime = 1679007891327, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e4)
2023-03-21T19:18:17.424+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.425+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 30, CreateTime = 1679008297964, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e6)
2023-03-21T19:18:17.425+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.425+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 31, CreateTime = 1679008305787, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 67)
2023-03-21T19:18:17.429+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.430+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 32, CreateTime = 1679008542099, serialized key size = -1, serialized value size = 73, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "-50", "callId" : "nesto777777777"})
2023-03-21T19:18:17.430+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.431+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : Invalid message inputs!
2023-03-21T19:18:17.431+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 33, CreateTime = 1679008625416, serialized key size = -1, serialized value size = 69, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "660", "callId" : "nesto88888"})
2023-03-21T19:18:17.432+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.432+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=660, callId=nesto88888  ]
2023-03-21T19:18:17.432+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=660, callId=nesto88888  ]
2023-03-21T19:18:17.433+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 34, CreateTime = 1679008783433, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e1)
2023-03-21T19:18:17.433+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.433+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 35, CreateTime = 1679008791522, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e2)
2023-03-21T19:18:17.434+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.434+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 36, CreateTime = 1679008823350, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e4)
2023-03-21T19:18:17.434+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.435+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 37, CreateTime = 1679008833444, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e5)
2023-03-21T19:18:17.435+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.435+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 38, CreateTime = 1679008864198, serialized key size = -1, serialized value size = 73, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "-50", "callId" : "nesto777777777"})
2023-03-21T19:18:17.436+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.436+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : Invalid message inputs!
2023-03-21T19:18:17.436+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 39, CreateTime = 1679008934645, serialized key size = -1, serialized value size = 61, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "100"})
2023-03-21T19:18:17.437+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.437+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=100  ]
2023-03-21T19:18:17.437+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Receive duplicate event
2023-03-21T19:18:17.437+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 40, CreateTime = 1679009078173, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e3)
2023-03-21T19:18:17.437+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.437+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 41, CreateTime = 1679009085200, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e4)
2023-03-21T19:18:17.437+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.438+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 42, CreateTime = 1679009098587, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e5)
2023-03-21T19:18:17.438+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.438+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 43, CreateTime = 1679009107736, serialized key size = -1, serialized value size = 73, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "-50", "callId" : "nesto777777777"})
2023-03-21T19:18:17.438+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.438+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : Invalid message inputs!
2023-03-21T19:18:17.439+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 44, CreateTime = 1679009125765, serialized key size = -1, serialized value size = 69, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "660", "callId" : "nesto88888"})
2023-03-21T19:18:17.440+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.440+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=660, callId=nesto88888  ]
2023-03-21T19:18:17.440+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Receive duplicate event
2023-03-21T19:18:17.440+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 45, CreateTime = 1679045824804, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e)
2023-03-21T19:18:17.441+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.441+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 46, CreateTime = 1679045840509, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = w)
2023-03-21T19:18:17.441+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.441+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 47, CreateTime = 1679045863537, serialized key size = -1, serialized value size = 63, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "660", "callId" : "8888"})
2023-03-21T19:18:17.442+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.442+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=660, callId=8888  ]
2023-03-21T19:18:17.442+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=660, callId=8888  ]
2023-03-21T19:18:17.442+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 48, CreateTime = 1679045895772, serialized key size = -1, serialized value size = 61, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "8888"})
2023-03-21T19:18:17.443+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.443+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=8888  ]
2023-03-21T19:18:17.443+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.443+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=8888, callStartTimestamp=660, callEndTimestamp=700, callDuration=40]
2023-03-21T19:18:17.443+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 8888
2023-03-21T19:18:17.443+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=8888, callStartTimestamp=660, callEndTimestamp=700, callDuration=40]
2023-03-21T19:18:17.444+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.444+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 49, CreateTime = 1679046027999, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e)
2023-03-21T19:18:17.444+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.444+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 50, CreateTime = 1679046039430, serialized key size = -1, serialized value size = 63, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "660", "callId" : "8888"})
2023-03-21T19:18:17.445+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.446+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=660, callId=8888  ]
2023-03-21T19:18:17.446+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=660, callId=8888  ]
2023-03-21T19:18:17.446+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 51, CreateTime = 1679046051131, serialized key size = -1, serialized value size = 61, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "8888"})
2023-03-21T19:18:17.447+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.447+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=8888  ]
2023-03-21T19:18:17.447+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.447+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=8888, callStartTimestamp=660, callEndTimestamp=700, callDuration=40]
2023-03-21T19:18:17.447+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 8888
2023-03-21T19:18:17.447+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=8888, callStartTimestamp=660, callEndTimestamp=700, callDuration=40]
2023-03-21T19:18:17.447+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.448+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 52, CreateTime = 1679046221190, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e)
2023-03-21T19:18:17.448+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.448+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 53, CreateTime = 1679046241713, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "200", "callId" : "100"})
2023-03-21T19:18:17.449+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.449+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=200, callId=100  ]
2023-03-21T19:18:17.450+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Receive duplicate event
2023-03-21T19:18:17.450+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 54, CreateTime = 1679046249813, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "100"})
2023-03-21T19:18:17.451+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.451+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=100  ]
2023-03-21T19:18:17.451+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.451+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=100, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.451+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 100
2023-03-21T19:18:17.452+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=100, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.452+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.452+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 55, CreateTime = 1679046309426, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "101"})
2023-03-21T19:18:17.453+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.454+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=101  ]
2023-03-21T19:18:17.454+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : scheduleMessageDelete is called
2023-03-21T19:18:17.455+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=END, timestamp=700, callId=101  ]
2023-03-21T19:18:17.455+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 56, CreateTime = 1679046315468, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "200", "callId" : "101"})
2023-03-21T19:18:17.456+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.456+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=200, callId=101  ]
2023-03-21T19:18:17.456+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.456+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=101, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.457+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 101
2023-03-21T19:18:17.457+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=101, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.457+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.457+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 57, CreateTime = 1679046396319, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "102"})
2023-03-21T19:18:17.458+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.458+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=102  ]
2023-03-21T19:18:17.458+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : scheduleMessageDelete is called
2023-03-21T19:18:17.458+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=END, timestamp=700, callId=102  ]
2023-03-21T19:18:17.459+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 58, CreateTime = 1679046399528, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "200", "callId" : "102"})
2023-03-21T19:18:17.459+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.460+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=200, callId=102  ]
2023-03-21T19:18:17.460+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.460+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=102, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.460+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 102
2023-03-21T19:18:17.460+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=102, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.460+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.460+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 59, CreateTime = 1679046426470, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "103"})
2023-03-21T19:18:17.461+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.461+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=103  ]
2023-03-21T19:18:17.465+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : scheduleMessageDelete is called
2023-03-21T19:18:17.465+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=END, timestamp=700, callId=103  ]
2023-03-21T19:18:17.465+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 60, CreateTime = 1679046429595, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "200", "callId" : "103"})
2023-03-21T19:18:17.466+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.467+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=200, callId=103  ]
2023-03-21T19:18:17.467+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.467+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=103, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.467+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 103
2023-03-21T19:18:17.468+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=103, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.468+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.468+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 61, CreateTime = 1679046435538, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "104"})
2023-03-21T19:18:17.469+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.469+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=104  ]
2023-03-21T19:18:17.469+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : scheduleMessageDelete is called
2023-03-21T19:18:17.469+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=END, timestamp=700, callId=104  ]
2023-03-21T19:18:17.469+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 62, CreateTime = 1679046438089, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "200", "callId" : "105"})
2023-03-21T19:18:17.470+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.470+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=200, callId=105  ]
2023-03-21T19:18:17.470+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=200, callId=105  ]
2023-03-21T19:18:17.470+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 63, CreateTime = 1679046454135, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "106"})
2023-03-21T19:18:17.471+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.471+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=106  ]
2023-03-21T19:18:17.471+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : scheduleMessageDelete is called
2023-03-21T19:18:17.471+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=END, timestamp=700, callId=106  ]
2023-03-21T19:18:17.471+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 64, CreateTime = 1679046458695, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "200", "callId" : "106"})
2023-03-21T19:18:17.472+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.472+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=200, callId=106  ]
2023-03-21T19:18:17.472+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.472+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=106, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.472+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 106
2023-03-21T19:18:17.472+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=106, callStartTimestamp=200, callEndTimestamp=700, callDuration=500]
2023-03-21T19:18:17.472+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.473+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 65, CreateTime = 1679048851089, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e)
2023-03-21T19:18:17.473+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.473+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 66, CreateTime = 1679048870300, serialized key size = -1, serialized value size = 63, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "-200", "callId" : "110"})
2023-03-21T19:18:17.474+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.474+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : Invalid message inputs!
2023-03-21T19:18:17.474+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 67, CreateTime = 1679048881173, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "300", "callId" : "110"})
2023-03-21T19:18:17.475+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.475+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=300, callId=110  ]
2023-03-21T19:18:17.475+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=300, callId=110  ]
2023-03-21T19:18:17.475+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 68, CreateTime = 1679048902004, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "110"})
2023-03-21T19:18:17.476+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.476+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=110  ]
2023-03-21T19:18:17.476+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.476+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=110, callStartTimestamp=300, callEndTimestamp=700, callDuration=400]
2023-03-21T19:18:17.476+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 110
2023-03-21T19:18:17.476+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=110, callStartTimestamp=300, callEndTimestamp=700, callDuration=400]
2023-03-21T19:18:17.476+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.477+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 69, CreateTime = 1679048913763, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "300", "callId" : "111"})
2023-03-21T19:18:17.477+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.478+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=300, callId=111  ]
2023-03-21T19:18:17.478+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=300, callId=111  ]
2023-03-21T19:18:17.478+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 70, CreateTime = 1679048921342, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "301", "callId" : "111"})
2023-03-21T19:18:17.478+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.478+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=301, callId=111  ]
2023-03-21T19:18:17.478+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Receive duplicate event
2023-03-21T19:18:17.479+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 71, CreateTime = 1679048924508, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "111"})
2023-03-21T19:18:17.479+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.479+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=111  ]
2023-03-21T19:18:17.479+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.480+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=111, callStartTimestamp=301, callEndTimestamp=700, callDuration=399]
2023-03-21T19:18:17.480+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 111
2023-03-21T19:18:17.480+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=111, callStartTimestamp=301, callEndTimestamp=700, callDuration=399]
2023-03-21T19:18:17.480+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.480+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 72, CreateTime = 1679049614846, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e)
2023-03-21T19:18:17.480+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.480+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 73, CreateTime = 1679049622589, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "112"})
2023-03-21T19:18:17.481+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.482+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=112  ]
2023-03-21T19:18:17.482+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : scheduleMessageDelete is called
2023-03-21T19:18:17.482+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=END, timestamp=700, callId=112  ]
2023-03-21T19:18:17.482+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 74, CreateTime = 1679049626162, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "301", "callId" : "112"})
2023-03-21T19:18:17.483+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.483+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=301, callId=112  ]
2023-03-21T19:18:17.484+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.484+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=112, callStartTimestamp=301, callEndTimestamp=700, callDuration=399]
2023-03-21T19:18:17.484+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 112
2023-03-21T19:18:17.484+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=112, callStartTimestamp=301, callEndTimestamp=700, callDuration=399]
2023-03-21T19:18:17.484+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.484+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 75, CreateTime = 1679052370447, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e)
2023-03-21T19:18:17.485+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.485+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 76, CreateTime = 1679052385843, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "700", "callId" : "200"})
2023-03-21T19:18:17.486+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.486+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=700, callId=200  ]
2023-03-21T19:18:17.486+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : scheduleMessageDelete is called
2023-03-21T19:18:17.486+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=END, timestamp=700, callId=200  ]
2023-03-21T19:18:17.486+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 77, CreateTime = 1679052389575, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "301", "callId" : "200"})
2023-03-21T19:18:17.487+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.487+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=301, callId=200  ]
2023-03-21T19:18:17.487+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.487+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=200, callStartTimestamp=301, callEndTimestamp=700, callDuration=399]
2023-03-21T19:18:17.487+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 200
2023-03-21T19:18:17.487+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=200, callStartTimestamp=301, callEndTimestamp=700, callDuration=399]
2023-03-21T19:18:17.488+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.488+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 78, CreateTime = 1679270346559, serialized key size = -1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = e)
2023-03-21T19:18:17.488+01:00 ERROR 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : Message need be in JSON format! 
2023-03-21T19:18:17.488+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 79, CreateTime = 1679270387368, serialized key size = -1, serialized value size = 61, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "100"})
2023-03-21T19:18:17.489+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.489+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=100  ]
2023-03-21T19:18:17.489+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=START, timestamp=50, callId=100  ]
2023-03-21T19:18:17.490+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 80, CreateTime = 1679270399022, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "250", "callId" : "100"})
2023-03-21T19:18:17.490+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.490+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=250, callId=100  ]
2023-03-21T19:18:17.491+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.491+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=100, callStartTimestamp=50, callEndTimestamp=250, callDuration=200]
2023-03-21T19:18:17.491+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 100
2023-03-21T19:18:17.491+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=100, callStartTimestamp=50, callEndTimestamp=250, callDuration=200]
2023-03-21T19:18:17.491+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:17.492+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 81, CreateTime = 1679270633636, serialized key size = -1, serialized value size = 60, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "END", "timestamp" : "250", "callId" : "101"})
2023-03-21T19:18:17.493+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.493+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=END, timestamp=250, callId=101  ]
2023-03-21T19:18:17.493+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : scheduleMessageDelete is called
2023-03-21T19:18:17.493+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Received message: EventMessage: [ callStatus=END, timestamp=250, callId=101  ]
2023-03-21T19:18:17.493+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.SpringKafkaTaskApplication      : ConsumerRecord(topic = topicTask1, partition = 1, leaderEpoch = 0, offset = 82, CreateTime = 1679270639021, serialized key size = -1, serialized value size = 61, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"callStatus": "START", "timestamp" : "50", "callId" : "101"})
2023-03-21T19:18:17.494+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] com.springkafka.task.EventKafkaFilter    : FILTER !
2023-03-21T19:18:17.494+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Message from handleMessage : EventMessage: [ callStatus=START, timestamp=50, callId=101  ]
2023-03-21T19:18:17.495+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Sending response to topic2
2023-03-21T19:18:17.495+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.springkafka.task.EventMessageHandler   : Topic2 Received ResponseMesg.json: ResponseMsg [callId=101, callStartTimestamp=50, callEndTimestamp=250, callDuration=200]
2023-03-21T19:18:17.495+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.cache.EventMessageCache         : Clean cache for callId 101
2023-03-21T19:18:17.495+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Response message from handleMessage for database! : ResponseMsg [callId=101, callStartTimestamp=50, callEndTimestamp=250, callDuration=200]
2023-03-21T19:18:17.495+01:00  INFO 36848 --- [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] c.s.task.DatabaseMessageHandler          : Put message to Cache!
2023-03-21T19:18:20.087+01:00  INFO 36848 --- [pool-2-thread-1] c.s.task.DatabaseMessageHandler          : TRYING INSERT INTO kafka_messages MESSAGE --> 
2023-03-21T19:18:20.087+01:00  INFO 36848 --- [pool-2-thread-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2023-03-21T19:18:21.099+01:00 ERROR 36848 --- [pool-2-thread-1] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.

org.postgresql.util.PSQLException: The connection attempt failed.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:331) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:247) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.makeConnection(Driver.java:434) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.connect(Driver.java:291) ~[postgresql-42.5.1.jar:42.5.1]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) ~[HikariCP-5.0.1.jar:na]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:646) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:960) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1015) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1025) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at com.springkafka.task.DatabaseMessageHandler.saveResponseMessageToDatabase(DatabaseMessageHandler.java:60) ~[classes/:na]
	at com.springkafka.task.DatabaseMessageHandler.lambda$scheduleSendingMessagesFromCache$0(DatabaseMessageHandler.java:114) ~[classes/:na]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) ~[na:na]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]
Caused by: java.net.UnknownHostException: ${SPRING_DATASOURCE_URL}
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567) ~[na:na]
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327) ~[na:na]
	at java.base/java.net.Socket.connect(Socket.java:633) ~[na:na]
	at org.postgresql.core.PGStream.createSocket(PGStream.java:241) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.PGStream.<init>(PGStream.java:98) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:109) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:235) ~[postgresql-42.5.1.jar:42.5.1]
	... 26 common frames omitted

2023-03-21T19:18:21.100+01:00 ERROR 36848 --- [pool-2-thread-1] c.s.task.DatabaseMessageHandler          : FAILD TO AGAIN SEND TO DB

org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:83) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:646) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:960) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1015) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1025) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at com.springkafka.task.DatabaseMessageHandler.saveResponseMessageToDatabase(DatabaseMessageHandler.java:60) ~[classes/:na]
	at com.springkafka.task.DatabaseMessageHandler.lambda$scheduleSendingMessagesFromCache$0(DatabaseMessageHandler.java:114) ~[classes/:na]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) ~[na:na]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]
Caused by: org.postgresql.util.PSQLException: The connection attempt failed.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:331) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:247) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.makeConnection(Driver.java:434) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.connect(Driver.java:291) ~[postgresql-42.5.1.jar:42.5.1]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) ~[HikariCP-5.0.1.jar:na]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80) ~[spring-jdbc-6.0.3.jar:6.0.3]
	... 12 common frames omitted
Caused by: java.net.UnknownHostException: ${SPRING_DATASOURCE_URL}
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567) ~[na:na]
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327) ~[na:na]
	at java.base/java.net.Socket.connect(Socket.java:633) ~[na:na]
	at org.postgresql.core.PGStream.createSocket(PGStream.java:241) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.PGStream.<init>(PGStream.java:98) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:109) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:235) ~[postgresql-42.5.1.jar:42.5.1]
	... 26 common frames omitted

2023-03-21T19:18:25.094+01:00  INFO 36848 --- [pool-2-thread-1] c.s.task.DatabaseMessageHandler          : TRYING INSERT INTO kafka_messages MESSAGE --> 
2023-03-21T19:18:25.095+01:00  INFO 36848 --- [pool-2-thread-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2023-03-21T19:18:26.106+01:00 ERROR 36848 --- [pool-2-thread-1] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.

org.postgresql.util.PSQLException: The connection attempt failed.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:331) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:247) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.makeConnection(Driver.java:434) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.connect(Driver.java:291) ~[postgresql-42.5.1.jar:42.5.1]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) ~[HikariCP-5.0.1.jar:na]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:646) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:960) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1015) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1025) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at com.springkafka.task.DatabaseMessageHandler.saveResponseMessageToDatabase(DatabaseMessageHandler.java:60) ~[classes/:na]
	at com.springkafka.task.DatabaseMessageHandler.lambda$scheduleSendingMessagesFromCache$0(DatabaseMessageHandler.java:114) ~[classes/:na]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) ~[na:na]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]
Caused by: java.net.UnknownHostException: ${SPRING_DATASOURCE_URL}
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567) ~[na:na]
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327) ~[na:na]
	at java.base/java.net.Socket.connect(Socket.java:633) ~[na:na]
	at org.postgresql.core.PGStream.createSocket(PGStream.java:241) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.PGStream.<init>(PGStream.java:98) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:109) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:235) ~[postgresql-42.5.1.jar:42.5.1]
	... 26 common frames omitted

2023-03-21T19:18:26.107+01:00 ERROR 36848 --- [pool-2-thread-1] c.s.task.DatabaseMessageHandler          : FAILD TO AGAIN SEND TO DB

org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:83) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:646) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:960) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1015) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1025) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at com.springkafka.task.DatabaseMessageHandler.saveResponseMessageToDatabase(DatabaseMessageHandler.java:60) ~[classes/:na]
	at com.springkafka.task.DatabaseMessageHandler.lambda$scheduleSendingMessagesFromCache$0(DatabaseMessageHandler.java:114) ~[classes/:na]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) ~[na:na]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]
Caused by: org.postgresql.util.PSQLException: The connection attempt failed.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:331) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:247) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.makeConnection(Driver.java:434) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.Driver.connect(Driver.java:291) ~[postgresql-42.5.1.jar:42.5.1]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) ~[HikariCP-5.0.1.jar:na]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117) ~[spring-jdbc-6.0.3.jar:6.0.3]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80) ~[spring-jdbc-6.0.3.jar:6.0.3]
	... 12 common frames omitted
Caused by: java.net.UnknownHostException: ${SPRING_DATASOURCE_URL}
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567) ~[na:na]
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327) ~[na:na]
	at java.base/java.net.Socket.connect(Socket.java:633) ~[na:na]
	at org.postgresql.core.PGStream.createSocket(PGStream.java:241) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.PGStream.<init>(PGStream.java:98) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:109) ~[postgresql-42.5.1.jar:42.5.1]
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:235) ~[postgresql-42.5.1.jar:42.5.1]
	... 26 common frames omitted

